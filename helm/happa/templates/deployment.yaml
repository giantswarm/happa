apiVersion: apps/v1
kind: Deployment
metadata:
  name: happa
  namespace: giantswarm
  labels:
    app: happa
spec:
  replicas: 2
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: happa
  template:
    metadata:
      annotations:
        releaseRevision: {{ .Release.Revision | quote }}
      labels:
        app: happa
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - happa
              topologyKey: kubernetes.io/hostname
      serviceAccountName: {{ .Values.name }}
      securityContext:
        fsGroup: 1337
        {{- if ge (int .Capabilities.KubeVersion.Minor) 19 }}
        {{- with .Values.podSeccompProfile }}
        seccompProfile:
          {{- . | toYaml | nindent 10 }}
        {{- end }}
        {{- end }}
      containers:
      - name: happa
        image: "{{ .Values.registry.domain }}/{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
        securityContext:
          {{- with .Values.containerSecurityContext }}
          {{- . | toYaml | nindent 10 }}
          {{- end }}
          readOnlyRootFilesystem: false
          runAsUser: 100
          {{- if ge (int .Capabilities.KubeVersion.Minor) 19 }}
          {{- with .Values.seccompProfile }}
          seccompProfile:
            {{- . | toYaml | nindent 14 }}
          {{- end }}
          {{- end }}
        env:
          - name: HAPPA_CONFIG_PATH
            value: "/var/run/{{ .Values.name }}/configmap/config.yaml"
          - name: HAPPA_VERSION
            value: "{{ .Chart.AppVersion }}"
        livenessProbe:
          httpGet:
            path: /
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 20Mi
          limits:
            cpu: 250m
            memory: 250Mi
        volumeMounts:
        - mountPath: /tmp
          name: nginx-tmpfs
        - name: "{{ .Values.name }}-configmap"
          mountPath: /var/run/{{ .Values.name }}/configmap/
          readOnly: true
      volumes:
      - name: nginx-tmpfs
        emptyDir:
          medium: Memory
          sizeLimit: 200Mi
      - name: "{{ .Values.name }}-configmap"
        configMap:
          name: "{{ .Values.name }}-configmap"
          items:
          - key: config.yaml
            path: config.yaml
