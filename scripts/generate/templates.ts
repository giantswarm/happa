import { ClientFunctionVerbs } from './getMapiResourcesList';
import { IResourceNames } from './write';

export const autoGeneratedWarningMessage = `/**
 * This file was automatically generated, PLEASE DO NOT MODIFY IT BY HAND.
 */`;

const genericMethodNames: Record<ClientFunctionVerbs, string> = {
  get: 'getResource',
  list: 'getListResource',
  delete: 'deleteResource',
  create: 'createResource',
  update: 'updateResource',
};

function pascalCaseToCamelCase(str: string) {
  const firstLowerCaseIndex = str
    .split('')
    .findIndex((char) => char === char.toLocaleLowerCase());

  if (firstLowerCaseIndex === -1) return str;

  const firstUpperCaseIndex = Math.max(firstLowerCaseIndex - 1, 1);

  return (
    str.substring(0, firstUpperCaseIndex).toLocaleLowerCase() +
    str.substring(firstUpperCaseIndex)
  );
}

export function formatGeneratedFileExport(fileName: string) {
  return `export * from './${fileName}';
  `;
}

export function formatInterfaceName(resourceName: string): string {
  return `I${resourceName[0].toLocaleUpperCase()}${resourceName.slice(1)}`;
}

export function formatTypesFileHeader(apiVersion: string): string {
  return `${autoGeneratedWarningMessage}
  
  import * as metav1 from 'model/services/mapi/metav1';
  
  export const ApiVersion = '${apiVersion}';
  `;
}

export function formatResourceKindExport(resourceName: string) {
  return `export const ${resourceName} = '${resourceName}';
  `;
}

export function formatListResourceExport(
  resourceNames: IResourceNames
): string {
  const resourceInterfaceName = formatInterfaceName(resourceNames.kind);
  const listResourceInterfaceName = formatInterfaceName(resourceNames.listKind);

  return `${formatResourceKindExport(resourceNames.listKind)}
export interface ${listResourceInterfaceName} extends metav1.IList<${resourceInterfaceName}> {
  apiVersion: typeof ApiVersion;
  kind: typeof ${resourceNames.listKind};
}
`;
}

export function getClientFunctionMethodName(
  resourceName: string,
  verb: ClientFunctionVerbs
) {
  switch (verb) {
    case 'list':
      return `get${resourceName}`;
    default:
      return `${verb}${resourceName}`;
  }
}

export function formatClientFunctionFileHeader(
  resourceName: string,
  verb: ClientFunctionVerbs
): string {
  const genericMethodName = genericMethodNames[verb];
  return `${autoGeneratedWarningMessage}

import { IHttpClient } from 'model/clients/HttpClient';
import { ${genericMethodName} } from 'model/services/mapi/generic/${genericMethodName}';
import * as k8sUrl from 'model/services/mapi/k8sUrl';
import { IOAuth2Provider } from 'utils/OAuth2/OAuth2';

import { ${formatInterfaceName(resourceName)} } from '.';
`;
}

export function formatClientFunctionGetMethod(
  apiVersion: string,
  resourceName: string,
  resourceNamePlural: string,
  namespaced: boolean,
  verb: ClientFunctionVerbs
): string {
  const clientFunctionName = getClientFunctionMethodName(resourceName, verb);

  return `export function ${clientFunctionName}(
  client: IHttpClient,
  auth: IOAuth2Provider,
  ${namespaced ? 'namespace: string,' : ''}
  name: string
) {
  const url = k8sUrl.create({
    baseUrl: window.config.mapiEndpoint,
    apiVersion: '${apiVersion}',
    kind: '${resourceNamePlural}',
    ${namespaced ? 'namespace,' : ''}
    name,
  });

  return ${genericMethodNames[verb]}<${formatInterfaceName(
    resourceName
  )}>(client, auth, url.toString());
}

export function ${clientFunctionName}Key(${
    namespaced ? 'namespace: string, ' : ''
  } name: string) {
  return \`${clientFunctionName}${namespaced ? '/${namespace}' : ''}/\${name}\`;
}
`;
}

export function formatClientFunctionListMethod(
  apiVersion: string,
  resourceName: string,
  resourceNamePlural: string,
  namespaced: boolean,
  verb: ClientFunctionVerbs
): string {
  const clientFunctionName = getClientFunctionMethodName(resourceName, verb);
  const listOptionsInterfaceName = `${formatInterfaceName(
    clientFunctionName
  )}Options`;

  return `export interface ${listOptionsInterfaceName} {
  ${namespaced ? 'namespace?: string;' : ''}
  labelSelector?: k8sUrl.IK8sLabelSelector;
}

export function ${clientFunctionName}(
  client: IHttpClient,
  auth: IOAuth2Provider,
  options?: ${listOptionsInterfaceName}
) {
  const url = k8sUrl.create({
    baseUrl: window.config.mapiEndpoint,
    apiVersion: '${apiVersion}',
    kind: '${resourceNamePlural}',
    ...options,
  });

  return ${genericMethodNames[verb]}<${formatInterfaceName(
    resourceName
  )}>(client, auth, url.toString());
}

export function ${clientFunctionName}Key(
  options?: ${listOptionsInterfaceName}
) {
  const url = k8sUrl.create({
    baseUrl: window.config.mapiEndpoint,
    apiVersion: '${apiVersion}',
    kind: '${resourceNamePlural}',
    ...options,
  });

  return url.toString();
}
`;
}

export function formatClientFunctionCreateMethod(
  apiVersion: string,
  resourceName: string,
  resourceNamePlural: string,
  namespaced: boolean,
  verb: ClientFunctionVerbs
) {
  const clientFunctionName = getClientFunctionMethodName(resourceName, verb);
  const resourceInterfaceName = formatInterfaceName(resourceName);
  const resourceNameParam = pascalCaseToCamelCase(resourceName);

  return `export function ${clientFunctionName}(
  client: IHttpClient,
  auth: IOAuth2Provider,
  ${resourceNameParam}: ${resourceInterfaceName}
) {
  const url = k8sUrl.create({
    baseUrl: window.config.mapiEndpoint,
    apiVersion: '${apiVersion}',
    kind: '${resourceNamePlural}',
    ${namespaced ? `namespace: ${resourceNameParam}.metadata.namespace!,` : ''}
  });

  return ${genericMethodNames[verb]}<${resourceInterfaceName}>(
    client,
    auth,
    url.toString(),
    ${resourceNameParam}
  );
}
`;
}

export function formatClientFunctionUpdateMethod(
  apiVersion: string,
  resourceName: string,
  resourceNamePlural: string,
  namespaced: boolean,
  verb: ClientFunctionVerbs
) {
  const clientFunctionName = getClientFunctionMethodName(resourceName, verb);
  const resourceInterfaceName = formatInterfaceName(resourceName);
  const resourceNameParam = pascalCaseToCamelCase(resourceName);

  return `export function ${clientFunctionName}(
  client: IHttpClient,
  auth: IOAuth2Provider,
  ${resourceNameParam}: ${resourceInterfaceName}
) {
  const url = k8sUrl.create({
    baseUrl: window.config.mapiEndpoint,
    apiVersion: '${apiVersion}',
    kind: '${resourceNamePlural}',
    name: ${resourceNameParam}.metadata.name,
    ${namespaced ? `namespace: ${resourceNameParam}.metadata.namespace!,` : ''}
  });

  return ${genericMethodNames[verb]}<${resourceInterfaceName}>(
    client,
    auth,
    url.toString(),
    ${resourceNameParam}
  );
}
`;
}

export function formatClientFunctionDeleteMethod(
  apiVersion: string,
  resourceName: string,
  resourceNamePlural: string,
  namespaced: boolean,
  verb: ClientFunctionVerbs
) {
  const clientFunctionName = getClientFunctionMethodName(resourceName, verb);
  const resourceInterfaceName = formatInterfaceName(resourceName);
  const resourceNameParam = pascalCaseToCamelCase(resourceName);

  return `export function ${clientFunctionName}(
  client: IHttpClient,
  auth: IOAuth2Provider,
  ${resourceNameParam}: ${resourceInterfaceName}
) {
  const url = k8sUrl.create({
    baseUrl: window.config.mapiEndpoint,
    apiVersion: '${apiVersion}',
    kind: '${resourceNamePlural}',
    name: ${resourceNameParam}.metadata.name,
    ${namespaced ? `namespace: ${resourceNameParam}.metadata.namespace!,` : ''}
  });

  return ${genericMethodNames[verb]}(client, auth, url.toString());
}
`;
}
