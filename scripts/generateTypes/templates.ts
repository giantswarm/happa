import { ClientFunctionVerbs } from './getMapiResourcesList';
import { IResourceNames } from './writeTypes';

export const autoGeneratedWarningMessage = `/**
 * This file was automatically generated, PLEASE DO NOT MODIFY IT BY HAND.
 */`;

const genericMethodNames: Record<ClientFunctionVerbs, string> = {
  get: 'getResource',
  list: 'getListResource',
  delete: 'deleteResource',
  create: 'createResource',
  update: 'updateResource',
};

export function formatTypesFileHeader(apiVersion: string): string {
  return `${autoGeneratedWarningMessage}

import * as metav1 from 'model/services/mapi/metav1';

export const ApiVersion = '${apiVersion}';\n`;
}

export function formatInterfaceName(resourceName: string): string {
  return `I${resourceName[0].toLocaleUpperCase()}${resourceName.slice(1)}`;
}

export function formatResourceKindExport(resourceName: string) {
  return `export const ${resourceName} = '${resourceName}';\n`;
}

export function formatListResourceExport(
  resourceNames: IResourceNames
): string {
  const resourceInterfaceName = formatInterfaceName(resourceNames.kind);
  const listResourceInterfaceName = formatInterfaceName(resourceNames.listKind);

  return `${formatResourceKindExport(resourceNames.listKind)}
export interface ${listResourceInterfaceName} extends metav1.IList<${resourceInterfaceName}> {
  apiVersion: typeof ApiVersion;
  kind: typeof ${resourceNames.listKind};
}\n`;
}

export function getClientFunctionMethodName(
  resourceName: string,
  verb: ClientFunctionVerbs
) {
  return `${verb}${resourceName}`;
}

export function formatClientFunctionFileHeader(
  resourceName: string,
  verb: ClientFunctionVerbs
): string {
  return `${autoGeneratedWarningMessage}

import { IHttpClient } from 'model/clients/HttpClient';
import { ${genericMethodNames[verb]} } from 'model/services/mapi/generic/${
    genericMethodNames[verb]
  }';
import * as k8sUrl from 'model/services/mapi/k8sUrl';
import { IOAuth2Provider } from 'utils/OAuth2/OAuth2';

import { ${formatInterfaceName(resourceName)} } from '.';\n`;
}

export function formatClientFunctionGetMethod(
  apiVersion: string,
  resourceName: string,
  resourceNamePlural: string,
  namespaced: boolean,
  verb: ClientFunctionVerbs
): string {
  return `export function ${getClientFunctionMethodName(resourceName, verb)}(
  client: IHttpClient,
  auth: IOAuth2Provider,${namespaced ? '\nnamespace: string,' : ''}
  name: string
) {
  const url = k8sUrl.create({
    baseUrl: window.config.mapiEndpoint,
    apiVersion: '${apiVersion}',
    kind: '${resourceNamePlural.toLocaleLowerCase()}',${
    namespaced ? '\nnamespace,' : ''
  }
    name,
  });

  return ${genericMethodNames[verb]}<${formatInterfaceName(
    resourceName
  )}>(client, auth, url.toString());
}

export function ${getClientFunctionMethodName(resourceName, verb)}Key(${
    namespaced ? 'namespace: string, ' : ''
  } name: string) {
  return \`${getClientFunctionMethodName(resourceName, verb)}${
    namespaced ? '/${namespace}' : ''
  }/\${name}\`;
}\n`;
}
